# Deploying Azure ML Pipeline Endpoint DevOps Pipeline
## Expects several variables defined in the AMLDBRVariables: 
### DEVOPS_PAT: Your devops personal access token
### AML_WORKSPACE_NAME: Name of the ML workspace, this will overwrite your ARM template
### DBR_WORKSPACE_NAME: Name of the Databricks workspace, this will overwrite your ARM template

variables:
- group: AMLDBRVariables
- name: 'RG_SERVICE_CONNECTION'
  value: 'rg-arm-service-connection' # ARM Resource Group Service Connection
- name: 'ML_SERVICE_CONNECTION'
  value: 'aml-service-connection' # Workspace Service Connection name
- name: 'PIPELINE_NAME'
  value: 'homepricespipeline'
- name: 'DATASTORE_NAME'
  value: 'datacontainer'
- name: 'PIPELINE_DESCRIPTION'
  value: 'Pipeline Endpoint focused on predicting housing price'
- name: 'EXPERIMENT_NAME'
  value: 'homeprice_experiment'

trigger: none

pool:
  vmImage: 'Ubuntu-16.04'

stages:
- stage: 'Set Up Environment'
  jobs:
  - job: Setup
    steps:
    - task: AzureCLI@2
      displayName: 'Resource Group Deployment'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: |
          az deployment group create -g $(AML_RESOURCE_GROUP) -n initial_deployment -f ./setup/infra-arm-template.json -p @./setup/infra-arm-template-parameters.json --parameters azDOPersonalAccessToken=$(DEVOPS_PAT) adbWorkspaceName=$(DBR_WORKSPACE_NAME)
          end=$(date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ')
          ARM_OUTPUTS=$(az deployment group show --name $DEPLOYMENT_NAME --resource-group $RG_NAME --query properties.outputs)
          STORAGE_KEY=$(echo $ARM_OUTPUTS | jq '.storageAccountKey.value' | tr -d '\"')
          AML_WORKSPACE_NAME=$(echo $ARM_OUTPUTS | jq '.amlWorkspace.value' | tr -d '\"')
          STORAGE_ACCOUNT_NAME=$(echo $ARM_OUTPUTS | jq '.storageAccountName.value' | tr -d '\"')
          RG_NAME=$(echo $ARM_OUTPUTS | jq '.resourceGroupName.value' | tr -d '\"')
          TRAIN_SAS_TOKEN=$(az storage blob generate-sas -n training.csv --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_KEY --container-name data --permissions arw --expiry $end | tr -d '\"')
          VALIDATE_SAS_TOKEN=$(az storage blob generate-sas -n validation.csv --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_KEY --container-name data --permissions arw --expiry $end | tr -d '\"')
          echo "Setting variables..."
          echo "##vso[task.setvariable variable=STORAGE_KEY]$STORAGE_KEY"
          echo "##vso[task.setvariable variable=TRAIN_SAS_TOKEN]$TRAIN_SAS_TOKEN"
          echo "##vso[task.setvariable variable=VALIDATE_SAS_TOKEN]$VALIDATE_SAS_TOKEN"
          echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME]$STORAGE_ACCOUNT_NAME"
          echo "##vso[task.setvariable variable=RG_NAME]$RG_NAME"
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: AzureCLI@2
      displayName: 'Get Databricks Workspace URL (set DBR_WORKSPACE_URL)'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: |
          # Get the Management Access Token
          MGMTAT=$(curl -X GET -H 'Content-Type: application/x-www-form-urlencoded' -d "grant_type=client_credentials&client_id=$CLIENT_ID&resource=https://management.core.windows.net/&client_secret=$CLIENT_SECRET" https://login.microsoftonline.com/$TENANT_ID/oauth2/token | jq '.access_token' | tr -d '"')
          
          DBRURL=$(curl -X GET -H "Authorization: Bearer $MGMTAT" "https://management.azure.com/subscriptions/$AML_SUBSCRIPTION_ID/resourcegroups/$AML_RESOURCE_GROUP/providers/Microsoft.Databricks/workspaces/$DBR_WORKSPACE_NAME?api-version=2018-04-01" | jq '.properties.workspaceUrl' | tr -d '"' )
          echo "##vso[task.setvariable variable=DBR_WORKSPACE_URL]https://$DBRURL"

    - task: AzureCLI@2
      displayName: 'Get Databricks Access Token From Service Principal (set DBR_ACCESS_TOKEN)'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: |
          # Get a Databricks Resource Token
          DBRAT=$(curl -X GET -H 'Content-Type: application/x-www-form-urlencoded' -d "grant_type=client_credentials&client_id=$CLIENT_ID&resource=2ff814a6-3304-4ab8-85cb-cd0e6f879c1d&client_secret=$CLIENT_SECRET" https://login.microsoftonline.com/$TENANT_ID/oauth2/token | jq '.access_token' | tr -d '"')
          
          # Get the Management Access Token
          MGMTAT=$(curl -X GET -H 'Content-Type: application/x-www-form-urlencoded' -d "grant_type=client_credentials&client_id=$CLIENT_ID&resource=https://management.core.windows.net/&client_secret=$CLIENT_SECRET" https://login.microsoftonline.com/$TENANT_ID/oauth2/token | jq '.access_token' | tr -d '"')
          
          # Create Databricks Access Token with Service Principal that is Contributor
          DBRTOKEN=$(curl -X POST -H "Authorization: Bearer $DBRAT" -H "X-Databricks-Azure-SP-Management-Token: $MGMTAT" -H 'X-Databricks-Azure-Workspace-Resource-Id: /subscriptions/$(AML_SUBSCRIPTION_ID)/resourceGroups/demotest01/providers/Microsoft.Databricks/workspaces/$DBR_WORKSPACE_NAME' $DBR_WORKSPACE_URL/api/2.0/token/create | jq '.token_value' | tr -d '"')
          # Output the access token into a variable
          echo "##vso[task.setvariable variable=DBR_ACCESS_TOKEN]$DBRTOKEN"
          
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
        addToPath: true
        architecture: 'x64'

    - task: Bash@3
      displayName: 'Register the Databricks Compute if necessary'
      inputs:
        targetType: 'inline'
        script: 'python ml/config-templates/databricks-compute.py'

    - task: Bash@3
      displayName: 'Generate some fake data'
      inputs:
        targetType: 'inline'
        script: 'python setup/generate_data.py'

    - task: Bash@3
      displayName: 'Move the data to blob'
      inputs:
        targetType: 'inline'
        script: |
          azcopy cp ./data/training.csv "https://$(STORAGE_ACCOUNT_NAME).blob.core.windows.net/data/training.csv?$(TRAIN_SAS_TOKEN)"
          azcopy cp ./data/validation.csv "https://$(STORAGE_ACCOUNT_NAME).blob.core.windows.net/data/validation.csv?$(VALIDATE_SAS_TOKEN)"
    
    - task: Bash@3
      displayName: 'Install Azure ML SDK'
      inputs:
        targetType: 'inline'
        script: 'pip install azureml-sdk'
    
    - task: AzureCLI@2
      displayName: 'Install AML CLI'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: 'az extension add -n azure-cli-ml'

    - task: AzureCLI@2
      displayName: 'Attach folder to workspace'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        workingDirectory: $(System.DefaultWorkingDirectory)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: 'az ml folder attach -w $(AML_WORKSPACE_NAME) -g $(AML_RESOURCE_GROUP)'

    - task: AzureCLI@2
      displayName: 'Register a Datastore'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        workingDirectory: $(System.DefaultWorkingDirectory)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: 'az ml datastore attach-blob --account-name $(STORAGE_ACCOUNT_NAME) --container-name data --name datacontainer --workspace-name $(AML_WORKSPACE_NAME) --resource-group $(RG_NAME) --account-key $(STORAGE_KEY)'

    - task: AzureCLI@2
      displayName: 'Register Datasets'
      inputs:
        azureSubscription: $(RG_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        scriptType: 'bash'
        inlineScript: |
          az ml dataset register -f ml/config-templates/aml-training-dataset.json --workspace-name $(AML_WORKSPACE_NAME) --resource-group $(RG_NAME) --skip-validation
          az ml dataset register -f ml/config-templates/aml-validation-dataset.json --workspace-name $(AML_WORKSPACE_NAME) --resource-group $(RG_NAME) --skip-validation
        workingDirectory: $(System.DefaultWorkingDirectory)